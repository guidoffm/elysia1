import { JWTPayload } from "jose";

export function checkTokenIssuer(tokenData: JWTPayload | undefined, set: { headers: Record<string, string> & { 'Set-Cookie'?: string | string[] | undefined; }; status?: number | "Continue" | "Switching Protocols" | "Processing" | "Early Hints" | "OK" | "Created" | "Accepted" | "Non-Authoritative Information" | "No Content" | "Reset Content" | "Partial Content" | "Multi-Status" | "Already Reported" | "Multiple Choices" | "Moved Permanently" | "Found" | "See Other" | "Not Modified" | "Temporary Redirect" | "Permanent Redirect" | "Bad Request" | "Unauthorized" | "Payment Required" | "Forbidden" | "Not Found" | "Method Not Allowed" | "Not Acceptable" | "Proxy Authentication Required" | "Request Timeout" | "Conflict" | "Gone" | "Length Required" | "Precondition Failed" | "Payload Too Large" | "URI Too Long" | "Unsupported Media Type" | "Range Not Satisfiable" | "Expectation Failed" | "I'm a teapot" | "Misdirected Request" | "Unprocessable Content" | "Locked" | "Failed Dependency" | "Too Early" | "Upgrade Required" | "Precondition Required" | "Too Many Requests" | "Request Header Fields Too Large" | "Unavailable For Legal Reasons" | "Internal Server Error" | "Not Implemented" | "Bad Gateway" | "Service Unavailable" | "Gateway Timeout" | "HTTP Version Not Supported" | "Variant Also Negotiates" | "Insufficient Storage" | "Loop Detected" | "Not Extended" | "Network Authentication Required" | undefined; redirect?: string | undefined; cookie?: Record<string, { domain?: string | undefined; expires?: Date | undefined; httpOnly?: boolean | undefined; maxAge?: number | undefined; path?: string | undefined; priority?: "low" | "medium" | "high" | undefined; sameSite?: boolean | "lax" | "strict" | "none" | undefined; secure?: boolean | undefined; secrets?: string | string[] | undefined; value?: unknown; }> | undefined; }, body: unknown) {
  if (tokenData?.iss !== 'https://idsvr4.azurewebsites.net') {
    set.status = 401;
    body = 'Invalid token issuer';
  }
  // return body;
}

export function checkTokenExpiration(tokenData: JWTPayload | undefined, set: { headers: Record<string, string> & { 'Set-Cookie'?: string | string[] | undefined; }; status?: number | "Continue" | "Switching Protocols" | "Processing" | "Early Hints" | "OK" | "Created" | "Accepted" | "Non-Authoritative Information" | "No Content" | "Reset Content" | "Partial Content" | "Multi-Status" | "Already Reported" | "Multiple Choices" | "Moved Permanently" | "Found" | "See Other" | "Not Modified" | "Temporary Redirect" | "Permanent Redirect" | "Bad Request" | "Unauthorized" | "Payment Required" | "Forbidden" | "Not Found" | "Method Not Allowed" | "Not Acceptable" | "Proxy Authentication Required" | "Request Timeout" | "Conflict" | "Gone" | "Length Required" | "Precondition Failed" | "Payload Too Large" | "URI Too Long" | "Unsupported Media Type" | "Range Not Satisfiable" | "Expectation Failed" | "I'm a teapot" | "Misdirected Request" | "Unprocessable Content" | "Locked" | "Failed Dependency" | "Too Early" | "Upgrade Required" | "Precondition Required" | "Too Many Requests" | "Request Header Fields Too Large" | "Unavailable For Legal Reasons" | "Internal Server Error" | "Not Implemented" | "Bad Gateway" | "Service Unavailable" | "Gateway Timeout" | "HTTP Version Not Supported" | "Variant Also Negotiates" | "Insufficient Storage" | "Loop Detected" | "Not Extended" | "Network Authentication Required" | undefined; redirect?: string | undefined; cookie?: Record<string, { domain?: string | undefined; expires?: Date | undefined; httpOnly?: boolean | undefined; maxAge?: number | undefined; path?: string | undefined; priority?: "low" | "medium" | "high" | undefined; sameSite?: boolean | "lax" | "strict" | "none" | undefined; secure?: boolean | undefined; secrets?: string | string[] | undefined; value?: unknown; }> | undefined; }, body: unknown) {
  const nbfDate = new Date((tokenData?.nbf as number) * 1000);
  const expDate = new Date((tokenData?.exp as number) * 1000);
  if (nbfDate > new Date()) {
    set.status = 401;
    body = 'Token is not yet valid';
  } else if (expDate < new Date()) {
    set.status = 401;
    body = 'Token has expired';
  }
  // return body;
}

export function checkTokenExists(tokenData: JWTPayload | undefined, set: { headers: Record<string, string> & { 'Set-Cookie'?: string | string[] | undefined; }; status?: number | "Continue" | "Switching Protocols" | "Processing" | "Early Hints" | "OK" | "Created" | "Accepted" | "Non-Authoritative Information" | "No Content" | "Reset Content" | "Partial Content" | "Multi-Status" | "Already Reported" | "Multiple Choices" | "Moved Permanently" | "Found" | "See Other" | "Not Modified" | "Temporary Redirect" | "Permanent Redirect" | "Bad Request" | "Unauthorized" | "Payment Required" | "Forbidden" | "Not Found" | "Method Not Allowed" | "Not Acceptable" | "Proxy Authentication Required" | "Request Timeout" | "Conflict" | "Gone" | "Length Required" | "Precondition Failed" | "Payload Too Large" | "URI Too Long" | "Unsupported Media Type" | "Range Not Satisfiable" | "Expectation Failed" | "I'm a teapot" | "Misdirected Request" | "Unprocessable Content" | "Locked" | "Failed Dependency" | "Too Early" | "Upgrade Required" | "Precondition Required" | "Too Many Requests" | "Request Header Fields Too Large" | "Unavailable For Legal Reasons" | "Internal Server Error" | "Not Implemented" | "Bad Gateway" | "Service Unavailable" | "Gateway Timeout" | "HTTP Version Not Supported" | "Variant Also Negotiates" | "Insufficient Storage" | "Loop Detected" | "Not Extended" | "Network Authentication Required" | undefined; redirect?: string | undefined; cookie?: Record<string, { domain?: string | undefined; expires?: Date | undefined; httpOnly?: boolean | undefined; maxAge?: number | undefined; path?: string | undefined; priority?: "low" | "medium" | "high" | undefined; sameSite?: boolean | "lax" | "strict" | "none" | undefined; secure?: boolean | undefined; secrets?: string | string[] | undefined; value?: unknown; }> | undefined; }, body: unknown) {
  if (!tokenData) {
    set.status = 401;
    body = 'Invalid token';
  }
  // return body;
}
